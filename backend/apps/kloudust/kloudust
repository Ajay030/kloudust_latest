#!/usr/bin/env node
/** 
 * Main entry point into Kloudust.
 * 
 * (C) 2020 TekMonks. All rights reserved.
 * License: See enclosed LICENSE file.
 */
global.KLOUD_CONSTANTS = require(`${__dirname}/lib/constants.js`);

const fs = require("fs");
const path = require("path");
const utils = require(`${KLOUD_CONSTANTS.LIBDIR}/utils.js`);
const dbAbstractor = require(`${KLOUD_CONSTANTS.LIBDIR}/dbAbstractor.js`);
const processargs = require(`${KLOUD_CONSTANTS.MONKSHU_BACKEND_LIBDIR}/processargs.js`);

const CMD_LINE_ARGS = { "__description": "Kloudust - (C) TekMonks\nHybrid Cloud Platform.",
    "k": {long: "color", required: false, help: "Colored console option."}, 
    "b": {long: "batch", required: true, help: "Batch command execution, each line is a new command."},
    "u": {long: "user", required: true, help: "User ID. The value is required if specified."},
    "p": {long: "password", required: true, help: "Password for the user. The value is required if user is specified."},
    "t": {long: "otp", required: true, help: "One time code for the user. The value is required if user is specified."},
    "j": {long: "project", required: true, help: "Project name. The value is required if specified."},
    "s": {long: "setup", required: false, help: "Running in setup mode. Only allowed from command line."},
    "e": {long: "execute", required: true, help: "Single command to execute. The value is required if specified."} };

let initComplete = false;   // init flag

exports.initAsync = async _ => {
    if (initComplete) return; 
    for (const initModule of KLOUD_CONSTANTS.CONF.INIT_MODULES) {
        const module = require(KLOUD_CONSTANTS.ROOTDIR+"/"+initModule);
        await module.initAsync();
    }
    initComplete= true;
}

/**
 * Command line args are documented below. In process args is an object with
 * the long property name and it's value as the argument value.
 * 
 * Command line arguments
 * "k": {long: "color", required: false, help: "Colored console option."}, 
 * "b": {long: "batch", required: true, help: "Batch command execution, each line is a new command."},
 * "u": {long: "user", required: true, help: "User ID. The value is required if specified."},
 * "p": {long: "password", required: true, help: "Password for the user. The value is required if user is specified."},
 * "t": {long: "otp", required: true, help: "One time code for the user. The value is required if user is specified."},
 * "j": {long: "project", required: true, help: "Project name. The value is required if specified."},
 * "s": {long: "setup", required: false, help: "Running in setup mode. Only allowed from command line."},
 * "e": {long: "execute", required: true, help: "Single command to execute. The value is required if specified."}
 * 
 * In process example
 *  {"user": "id@email.com", "project": "project_id", "execute": "command_to_execute"}
 * 
 * @param inprocessArgs 
 * @returns 
 */
exports.kloudust = async function(inprocessArgs) {
    const args = inprocessArgs||processargs.getArgs(CMD_LINE_ARGS);

    if (args.color) KLOUD_CONSTANTS.COLORED_OUT = true;

    await exports.initAsync(); // init Kloudust this is needed to login the user below

    if (args.setup && ((await dbAbstractor.getUserCount()) == 0)) KLOUD_CONSTANTS.env._setup_mode = true;   // setup mode is only allowed with 0 users

    if (!args.user) {_showHelpAndExit(); return {result: false, err: "", out: ""};}
    else if (!await _loginUser(args)) return {result: false, err: "User login failed.", out: ""};

    if (args.batch) {
        KLOUD_CONSTANTS.LOGBARE(CMD_LINE_ARGS.__description);

        const fileToExec = args.batch[0]
        KLOUD_CONSTANTS.LOGINFO(`Starting batch file execution`);
        let out = "", err = "";
        for (const execLine of fileToExec.split(";")) {
            if (execLine.trim() == "" || execLine.trim().startsWith("#")) continue;    // skip empty or comment lines
            const results = await _execCommand(utils.parseArgs(execLine)); out += `${results.out}\n`; err += `${results.err}\n`
            if (!results.result) {KLOUD_CONSTANTS.EXITFAILED(); return {...CONSTANTS.FALSE_RESULT, out, err};}
        }

        KLOUD_CONSTANTS.EXITOK(); return {...CONSTANTS.TRUE_RESULT, out, err};
    } else if (args.execute) {
        KLOUD_CONSTANTS.LOGBARE(CMD_LINE_ARGS.__description);

        const results = await _execCommand(utils.parseArgs(args.execute[0]));
        if (results.result) {KLOUD_CONSTANTS.EXITOK(); return {...results, ...CONSTANTS.TRUE_RESULT};}
        else {KLOUD_CONSTANTS.EXITFAILED(); return {...results, ...CONSTANTS.FALSE_RESULT};}
    } else {_showHelpAndExit(); return {...CONSTANTS.FALSE_RESULT, err: "", out: ""};} // nothing to do
}

function _showHelpAndExit() {
    KLOUD_CONSTANTS.LOGBARE(processargs.helpInformation(CMD_LINE_ARGS), KLOUD_CONSTANTS.COLORS.red); 
    KLOUD_CONSTANTS.EXITFAILED();
}

async function _loginUser(args) {
    if (!await dbAbstractor.loginUser(args.user[0], args.project?.[0])) {
        KLOUD_CONSTANTS.LOGERROR(`User not authorized for the project ${args.project?.[0]||"undefined"}.`); KLOUD_CONSTANTS.EXITFAILED(); return false; }
    return true;
}

async function _execCommand(params) {
    const command = params[0]; const cmdParams = params.slice(1);
    try {
        const module = require(`${KLOUD_CONSTANTS.LIBDIR}/cmd/${command}.js`);
        return await module.exec(cmdParams);
    } catch (err) {
        KLOUD_CONSTANTS.LOGERROR(err); return {result: false, stdout: "", stderr: err.toString()};
    }
}
